import { afterEach, beforeEach, describe, expect, it } from "bun:test";
import fs from "node:fs/promises";
import os from "node:os";

import path from "~/libs/pathkit/pathkit-mod.js";
import { convertImportPaths, normalizeQuotes } from "~/mod.js";

describe("Import Paths Converter", () => {
  let tempDir: string;

  // Create a temporary directory for testing
  beforeEach(async () => {
    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), "import-paths-test-"));
  });

  // Clean up after tests
  afterEach(async () => {
    await fs.rm(tempDir, { recursive: true, force: true });
  });

  it("should convert relative imports to absolute imports", async () => {
    // Create a test file with relative imports
    const filePath = path.join(tempDir, "testFile.ts");
    const fileContent = `import { foo } from './foo';
export * from "./bar";`;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Call conversion: relative -> absolute (distJsrDryRun: false so file is modified)
    const results = await convertImportPaths({
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "relative",
      libsList: {},
      toType: "absolute",
    });

    // Read the modified file
    const modifiedContent = await fs.readFile(filePath, "utf8");

    // Compute the expected absolute paths
    const expectedFoo = path
      .resolve(path.dirname(filePath), "./foo")
      .replace(/\\/g, "/");
    const expectedBar = path
      .resolve(path.dirname(filePath), "./bar")
      .replace(/\\/g, "/");

    expect(normalizeQuotes(modifiedContent)).toContain(
      `import { foo } from "${expectedFoo}"`,
    );
    expect(normalizeQuotes(modifiedContent)).toContain(
      `export * from "${expectedBar}"`,
    );
    expect(results.some((r) => r.success === true)).toBe(true);
  });

  it("should convert relative imports to alias imports", async () => {
    // Create a test file with a relative import
    const filePath = path.join(tempDir, "testAlias.ts");
    const fileContent = `import foo from './foo';`;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Convert relative -> alias
    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "relative",
      libsList: {},
      toType: "alias",
    });

    // Read the modified file
    const modifiedContent = await fs.readFile(filePath, "utf8");
    expect(normalizeQuotes(modifiedContent)).toContain(
      `import foo from "~/foo"`,
    );
  });

  it("should convert complex relative imports to alias imports", async () => {
    // Create a test file with multiple relative imports (nested paths)
    const filePath = path.join(tempDir, "testComplexRelativeToAlias.ts");
    const fileContent = `
      import { a } from './folder/a';
      import b from './folder/b/index';
      export { default as c } from './folder/c';
    `;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Convert relative -> alias
    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "relative",
      libsList: {},
      toType: "alias",
    });

    // Read the modified file
    const modifiedContent = await fs.readFile(filePath, "utf8");

    expect(normalizeQuotes(modifiedContent)).toContain(
      `import { a } from "~/folder/a"`,
    );
    expect(normalizeQuotes(modifiedContent)).toContain(
      `import b from "~/folder/b/index"`,
    );
    expect(normalizeQuotes(modifiedContent)).toContain(
      `export { default as c } from "~/folder/c"`,
    );
  });

  it("should process dynamic imports", async () => {
    // Create a test file with a dynamic import
    const filePath = path.join(tempDir, "testDynamic.ts");
    const fileContent = `const mod = await import('./dynamicModule');`;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Convert dynamic -> absolute
    await convertImportPaths({
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "dynamic",
      libsList: {},
      toType: "absolute",
    });

    const modifiedContent = await fs.readFile(filePath, "utf8");
    const expectedDynamic = path
      .resolve(path.dirname(filePath), "./dynamicModule")
      .replace(/\\/g, "/");
    expect(normalizeQuotes(modifiedContent)).toContain(
      `import("${expectedDynamic}")`,
    );
  });

  it("should convert alias imports to relative imports", async () => {
    const filePath = path.join(tempDir, "testAliasToRelative.ts");
    const fileContent = `import foo from "~/foo";`;
    await fs.writeFile(filePath, fileContent, "utf8");

    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "alias",
      libsList: {},
      toType: "relative",
    });

    const modifiedContent = await fs.readFile(filePath, "utf8");
    expect(normalizeQuotes(modifiedContent)).toContain(
      `import foo from "./foo"`,
    );
  });

  it("should convert alias imports to alias imports (no changes)", async () => {
    // Create a test file with an alias import
    const filePath = path.join(tempDir, "testAliasToAlias.ts");
    const fileContent = `import foo from "~/foo";`;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Convert alias -> alias (conversion should result in no changes)
    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "alias",
      libsList: {},
      toType: "alias",
    });

    // Read the modified file
    const modifiedContent = await fs.readFile(filePath, "utf8");
    expect(modifiedContent).toBe(fileContent);
  });

  it("should not change file if no matching imports are found", async () => {
    // Create a test file with an import that doesn't match the conversion criteria
    const filePath = path.join(tempDir, "noChange.ts");
    const fileContent = `import { bar } from "/absolute/path/bar";`;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Try to convert from relative to absolute (won't match because it's already absolute)
    const results = await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: tempDir,
      distJsrDryRun: false,
      fromType: "relative",
      libsList: {},
      toType: "absolute",
    });

    // Read the file again
    const modifiedContent = await fs.readFile(filePath, "utf8");
    expect(modifiedContent).toBe(fileContent);

    // Check that the result message indicates no matching import paths were found.
    const fileResult = results.find((r) => r.filePath === filePath);
    expect(fileResult?.message).toContain("No matching import paths found");
  });

  it("should throw an error when alias conversion is attempted without aliasPrefix", async () => {
    // Create a test file with an alias import
    const filePath = path.join(tempDir, "testMissingAlias.ts");
    const fileContent = `import foo from "~/foo";`;
    await fs.writeFile(filePath, fileContent, "utf8");

    // Attempt conversion without providing aliasPrefix and expect an error.
    expect(
      convertImportPaths({
        baseDir: tempDir,
        // aliasPrefix is intentionally omitted
        distJsrDryRun: false,
        fromType: "alias",
        libsList: {},
        toType: "relative",
      }),
    ).rejects.toThrow("aliasPrefix is required for alias path conversions");
  });

  it("should handle complex directory movements when converting alias to relative", async () => {
    // Create a source directory structure similar to the reported issue
    const srcDir = path.join(tempDir, "src");
    const libsDir = path.join(srcDir, "libs");
    const pathkitDir = path.join(libsDir, "pathkit");
    const pathkitImplDir = path.join(pathkitDir, "pathkit-impl");
    const internalDir = path.join(pathkitImplDir, "internal");

    // Create the directory structure
    await fs.mkdir(internalDir, { recursive: true });

    // Create source files
    const sourceFile = path.join(internalDir, "path.ts");
    const targetFile = path.join(pathkitDir, "delete-me.ts");

    // Create the files with content
    await fs.writeFile(
      sourceFile,
      'import { deleteMe } from "~/libs/pathkit/delete-me.js";',
    );
    await fs.writeFile(targetFile, 'export const deleteMe = "test";');

    // Create the output directory structure
    const distTestDir = path.join(tempDir, "dist-test");
    const pathkitImplOutDir = path.join(distTestDir, "pathkit-impl");
    const internalOutDir = path.join(pathkitImplOutDir, "internal");

    // Create the output directory structure
    await fs.mkdir(internalOutDir, { recursive: true });

    // Copy files to their new locations
    const outputSourceFile = path.join(internalOutDir, "path.ts");
    const outputTargetFile = path.join(distTestDir, "delete-me.ts");

    await fs.copyFile(sourceFile, outputSourceFile);
    await fs.copyFile(targetFile, outputTargetFile);

    // Convert the paths
    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: distTestDir,
      distJsrDryRun: false,
      fromType: "alias",
      libsList: {},
      toType: "relative",
    });

    // Read the modified file
    const modifiedContent = await fs.readFile(outputSourceFile, "utf8");
    expect(normalizeQuotes(modifiedContent)).toBe(
      `import { deleteMe } from "../../delete-me.js";`,
    );
  });

  it("should handle nested alias paths with common segments", async () => {
    // Create a complex directory structure with common segments
    const srcDir = path.join(tempDir, "src");
    const commonDir = path.join(srcDir, "common");
    const featureDir = path.join(srcDir, "features");
    const utilsDir = path.join(commonDir, "utils");
    const subFeatureDir = path.join(featureDir, "sub-feature");

    // Create directories
    await fs.mkdir(utilsDir, { recursive: true });
    await fs.mkdir(subFeatureDir, { recursive: true });

    // Create source files
    const sourceFile = path.join(subFeatureDir, "component.ts");
    const targetFile = path.join(utilsDir, "helper.ts");

    // Write initial content
    await fs.writeFile(
      sourceFile,
      `import { helper } from "~/common/utils/helper.js";`,
    );
    await fs.writeFile(targetFile, "export const helper = () => {};");

    // Create output structure in dist
    const distDir = path.join(tempDir, "dist");
    const outFeatureDir = path.join(distDir, "features");
    const outSubFeatureDir = path.join(outFeatureDir, "sub-feature");
    const outUtilsDir = path.join(distDir, "utils");

    // Create output directories
    await fs.mkdir(outSubFeatureDir, { recursive: true });
    await fs.mkdir(outUtilsDir, { recursive: true });

    // Copy files to their new locations
    const outputSourceFile = path.join(outSubFeatureDir, "component.ts");
    const outputTargetFile = path.join(outUtilsDir, "helper.ts");

    await fs.copyFile(sourceFile, outputSourceFile);
    await fs.copyFile(targetFile, outputTargetFile);

    // Convert the paths
    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: distDir,
      distJsrDryRun: false,
      fromType: "alias",
      libsList: {},
      toType: "relative",
    });

    // Verify the conversion
    const modifiedContent = await fs.readFile(outputSourceFile, "utf8");
    expect(normalizeQuotes(modifiedContent)).toBe(
      `import { helper } from "../../utils/helper.js";`,
    );
  });

  it("should handle multiple alias imports with different movement patterns", async () => {
    // Create a complex source structure
    const srcDir = path.join(tempDir, "src");
    const modulesDir = path.join(srcDir, "modules");
    const sharedDir = path.join(srcDir, "shared");
    const featureDir = path.join(modulesDir, "feature");
    const utilsDir = path.join(sharedDir, "utils");
    const helpersDir = path.join(sharedDir, "helpers");

    // Create directories
    await fs.mkdir(featureDir, { recursive: true });
    await fs.mkdir(utilsDir, { recursive: true });
    await fs.mkdir(helpersDir, { recursive: true });

    // Create source files
    const sourceFile = path.join(featureDir, "main.ts");
    const utilFile = path.join(utilsDir, "format.ts");
    const helperFile = path.join(helpersDir, "common.ts");

    // Write initial content with multiple alias imports
    const initialContent = [
      'import { format } from "~/shared/utils/format.js";',
      'import { helper } from "~/shared/helpers/common.js";',
      'import type { Config } from "~/shared/utils/format.js";',
    ].join("\n");
    await fs.writeFile(sourceFile, initialContent);
    await fs.writeFile(
      utilFile,
      "export const format = () => {}; export type Config = {};",
    );
    await fs.writeFile(helperFile, "export const helper = () => {};");

    // Create output structure with different layout
    const distDir = path.join(tempDir, "dist");
    const outFeatureDir = path.join(distDir, "feature");
    const outUtilsDir = path.join(distDir, "utils");

    // Create output directories
    await fs.mkdir(outFeatureDir, { recursive: true });
    await fs.mkdir(outUtilsDir, { recursive: true });

    // Copy files to their new locations with flattened structure
    const outputSourceFile = path.join(outFeatureDir, "main.ts");
    const outputUtilFile = path.join(outUtilsDir, "format.ts");
    const outputHelperFile = path.join(outUtilsDir, "common.ts");

    await fs.copyFile(sourceFile, outputSourceFile);
    await fs.copyFile(utilFile, outputUtilFile);
    await fs.copyFile(helperFile, outputHelperFile);

    // Convert the paths
    await convertImportPaths({
      aliasPrefix: "~/",
      baseDir: distDir,
      distJsrDryRun: false,
      fromType: "alias",
      libsList: {},
      toType: "relative",
    });

    // Verify the conversion handles all imports correctly
    const modifiedContent = await fs.readFile(outputSourceFile, "utf8");
    const expectedContent = [
      'import { format } from "../utils/format.js";',
      'import { helper } from "../utils/common.js";',
      'import type { Config } from "../utils/format.js";',
    ].join("\n");
    expect(normalizeQuotes(modifiedContent.trim())).toBe(
      normalizeQuotes(expectedContent.trim()),
    );
  });
});
